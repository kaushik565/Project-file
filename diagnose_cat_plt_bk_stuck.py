#!/usr/bin/env python3
"""
CAT PLT BK STUCK - Hardware Diagnostic Tool
Helps diagnose cartridge plate backward movement issues.
"""

import time
import logging
from hardware import get_hardware_controller

def test_sensors():
    """Test sensor readings that affect CAT PLT BK STUCK error."""
    print("üîç SENSOR DIAGNOSTIC TEST")
    print("=" * 50)
    
    try:
        hardware = get_hardware_controller()
        print("‚úÖ Hardware controller initialized")
    except Exception as e:
        print(f"‚ùå Hardware controller failed: {e}")
        print("üîß This test requires actual hardware (Raspberry Pi with GPIO)")
        return False
    
    # Test pin reading (simulated for development systems)
    sensor_pins = {
        'BW_SNS (RC0)': 'Backward sensor - should be HIGH when plate at back',
        'FW_SNS (RC1)': 'Forward sensor - should be HIGH when plate at front', 
        'MECH_UP_SNS (RC2)': 'Mech plate up sensor',
        'STACK_SNS (RC4)': 'Stack sensor - cartridge present',
        'RJT_SNS (RE2)': 'Rejection sensor - diverter position'
    }
    
    print("\nüì° SENSOR STATUS:")
    for pin_name, description in sensor_pins.items():
        print(f"  {pin_name}: {description}")
        # Note: Actual GPIO reading would happen here on real hardware
    
    print("\n‚ö° ACTUATOR TEST:")
    actuator_pins = {
        'PLATE_UD (RA2)': 'Plate up/down (0=up/back, 1=down/forward)',
        'CAT_FB (RE0)': 'Cartridge forward/back position',
        'REJECT_SV (RA4)': 'Rejection solenoid valve'
    }
    
    for pin_name, description in actuator_pins.items():
        print(f"  {pin_name}: {description}")
    
    return True

def diagnose_cat_plt_bk_stuck():
    """Provide specific guidance for CAT PLT BK STUCK error."""
    print("\nüö® CAT PLT BK STUCK ERROR DIAGNOSIS")
    print("=" * 50)
    
    print("""
üìã WHAT THIS ERROR MEANS:
   ‚Ä¢ Cartridge plate cannot move to backward position
   ‚Ä¢ BW_SNS sensor (RC0) not detecting plate at back position  
   ‚Ä¢ 10-second timeout exceeded waiting for sensor signal
   
üîß IMMEDIATE ACTIONS:
   1. Press START button on jig to reset error
   2. Remove any cartridges from stack
   3. Check for physical obstructions
   
‚ö†Ô∏è COMMON CAUSES:
   ‚Ä¢ Mechanical jam or binding in plate mechanism
   ‚Ä¢ BW_SNS sensor misaligned or failed
   ‚Ä¢ PLATE_UD actuator not working (RA2)
   ‚Ä¢ Low air pressure (pneumatic systems)
   ‚Ä¢ Debris blocking plate movement
   
üîç DIAGNOSTIC STEPS:
   1. POWER OFF and manually check plate movement
   2. Verify BW_SNS sensor alignment and wiring
   3. Test PLATE_UD actuator operation
   4. Check for loose connections on RC0 (BW_SNS)
   5. Verify 5V power supply to sensors
   
üí° SENSOR TRIGGER TEST:
   ‚Ä¢ BW_SNS should be LOW (0V) when nothing detected
   ‚Ä¢ BW_SNS should be HIGH (5V) when plate at back position
   ‚Ä¢ Use multimeter to test voltage on RC0 pin
   
üîå WIRING CHECK:
   ‚Ä¢ RC0 (BW_SNS) - Backward sensor input
   ‚Ä¢ RA2 (PLATE_UD) - Plate actuator output  
   ‚Ä¢ RE0 (CAT_FB) - Cartridge position output
   
‚è±Ô∏è TIMING INFO:
   ‚Ä¢ Normal plate movement: 2-5 seconds
   ‚Ä¢ Timeout setting: 10 seconds (10000ms)
   ‚Ä¢ If movement is very slow, check for mechanical friction
""")

def show_error_recovery():
    """Show how to recover from the error state."""
    print("\nüîÑ ERROR RECOVERY PROCEDURE")
    print("=" * 50)
    
    print("""
STEP 1: IMMEDIATE RESET
   ‚Üí Press START button on jig control panel
   ‚Üí This runs error_loop() recovery function
   ‚Üí System will attempt automatic recovery
   
STEP 2: IF ERROR PERSISTS
   ‚Üí POWER OFF the jig completely
   ‚Üí Wait 10 seconds
   ‚Üí Check for physical obstructions
   ‚Üí Remove cartridges from stack
   ‚Üí POWER ON and try again
   
STEP 3: MANUAL TESTING
   ‚Üí With power OFF, manually move plate mechanism
   ‚Üí Should move smoothly without binding
   ‚Üí Check sensor triggers manually
   ‚Üí Look for damaged cables or loose connections
   
STEP 4: FIRMWARE RESET
   ‚Üí If USB/UART connection available:
   ‚Üí Send 'R' command to reset PIC controller
   ‚Üí Check Pi ‚Üî PIC communication status
   
STEP 5: HARDWARE MAINTENANCE
   ‚Üí If error continues, likely hardware issue
   ‚Üí Contact maintenance for sensor/actuator check
   ‚Üí May need mechanical adjustment or part replacement
""")

def main():
    """Run complete diagnostic for CAT PLT BK STUCK error."""
    print("üõ†Ô∏è CAT PLT BK STUCK - DIAGNOSTIC TOOL")
    print("=" * 60)
    print("This tool helps diagnose cartridge plate movement issues.")
    print("=" * 60)
    
    # Run hardware tests
    test_sensors()
    
    # Show specific diagnosis
    diagnose_cat_plt_bk_stuck()
    
    # Show recovery steps
    show_error_recovery()
    
    print("\n" + "=" * 60)
    print("üéØ SUMMARY:")
    print("1. Press START button first (quickest fix)")
    print("2. Check physical obstructions (power OFF)")
    print("3. Test BW_SNS sensor (RC0) and PLATE_UD actuator (RA2)")
    print("4. If error persists, likely hardware maintenance needed")
    print("=" * 60)

if __name__ == "__main__":
    main()
#!/usr/bin/env python3

"""
SBC Er-1 Quick Fix

The SBC Er-1 error means ACTJv20 firmware can't detect the Pi GPIO signal.
This script tests and fixes common GPIO initialization issues.
"""

import sys
import time

def quick_sbc_fix():
    """Quick diagnosis and fix for SBC Er-1."""
    
    print("üö® SBC Er-1 QUICK FIX")
    print("=====================")
    print()
    print("üìã SBC Er-1 means: ACTJv20 can't detect Pi GPIO signal")
    print()
    
    # Test 1: GPIO Basic Test
    print("1Ô∏è‚É£ Testing GPIO 12 (RASP_IN_PIC)...")
    try:
        import RPi.GPIO as GPIO
        
        # Clean slate
        GPIO.cleanup()
        GPIO.setmode(GPIO.BCM)
        
        # Setup GPIO 12
        GPIO.setup(12, GPIO.OUT, initial=GPIO.HIGH)
        print("   ‚úÖ GPIO 12 initialized as OUTPUT HIGH")
        
        # Test sequence
        for i in range(3):
            GPIO.output(12, GPIO.LOW)
            print(f"   üîÑ GPIO 12 LOW (test {i+1})")
            time.sleep(0.5)
            
            GPIO.output(12, GPIO.HIGH) 
            print(f"   üîÑ GPIO 12 HIGH (test {i+1})")
            time.sleep(0.5)
        
        print("   ‚úÖ GPIO 12 responding correctly")
        
    except Exception as e:
        print(f"   ‚ùå GPIO Error: {e}")
        return False
    
    # Test 2: Hardware Controller
    print("\n2Ô∏è‚É£ Testing Hardware Controller...")
    try:
        from hardware import get_hardware_controller
        hardware = get_hardware_controller()
        
        print("   üîÑ Sending READY signal...")
        hardware.signal_ready_to_firmware()
        time.sleep(1)
        
        print("   üîÑ Sending BUSY signal...")
        hardware.signal_busy_to_firmware()
        time.sleep(1)
        
        print("   üîÑ Back to READY...")
        hardware.signal_ready_to_firmware()
        
        print("   ‚úÖ Hardware controller working")
        
    except Exception as e:
        print(f"   ‚ùå Hardware Error: {e}")
        return False
    
    # Test 3: Legacy Mode Check
    print("\n3Ô∏è‚É£ Checking Legacy Mode...")
    try:
        from actj_legacy_integration import is_legacy_mode
        
        if is_legacy_mode():
            print("   ‚úÖ Legacy mode is ACTIVE")
        else:
            print("   ‚ö†Ô∏è Legacy mode NOT active - this could cause SBC Er-1!")
            print("   üîß Run: python3 switch_mode.py legacy")
            
    except Exception as e:
        print(f"   ‚ùå Legacy check error: {e}")
    
    print("\n" + "=" * 40)
    print("üí° COMMON SBC Er-1 CAUSES:")
    print("   1. GPIO 12 not connected to ACTJv20 RB6")
    print("   2. Poor/loose wire connection")
    print("   3. ACTJv20 not powered on properly")
    print("   4. Pi not in legacy mode")
    print("   5. GPIO permissions issue")
    print()
    print("üîß IMMEDIATE FIXES TO TRY:")
    print("   1. Check GPIO 12 (Pi) ‚Üí RB6 (ACTJv20) wire")
    print("   2. Power cycle the ACTJv20")
    print("   3. Run: sudo python3 main.py")
    print("   4. Check ACTJv20 LCD for startup messages")
    print()
    
    # Keep GPIO ready for testing
    try:
        GPIO.output(12, GPIO.HIGH)  # Keep ready
        print("üöÄ GPIO 12 is now HIGH (READY) for ACTJv20 testing")
        print("   Try pressing START on ACTJv20 now...")
    except:
        pass
    
    return True

if __name__ == "__main__":
    success = quick_sbc_fix()
    
    if success:
        print("\n‚úÖ GPIO tests completed")
        print("üîå Check your hardware connections and try main.py")
    else:
        print("\n‚ùå GPIO issues detected - fix these first")
        
    print("\n‚è≥ Keeping script running for 30 seconds...")
    print("   (GPIO 12 will stay HIGH for testing)")
    
    try:
        time.sleep(30)
    except KeyboardInterrupt:
        pass
    
    # Cleanup
    try:
        import RPi.GPIO as GPIO
        GPIO.cleanup()
        print("üßπ GPIO cleaned up")
    except:
        pass
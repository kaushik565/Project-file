#!/bin/bash
# Complete System Test - Batch Validation System
# Run this after scanner is working to test the full system

echo "üöÄ COMPLETE SYSTEM TEST"
echo "======================="

echo "1. üìã Checking project files..."
required_files=("main.py" "config.py" "hardware.py" "logic.py" "test_pi_usb_scanner.py")
missing_files=()

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo "   ‚úÖ $file"
    else
        echo "   ‚ùå $file - MISSING"
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -gt 0 ]; then
    echo "‚ùå Missing files. Make sure all project files are copied to Pi."
    exit 1
fi

echo
echo "2. üîå Testing hardware communication..."
if python3 verify_system.py | grep -q "PASSED"; then
    echo "   ‚úÖ Hardware verification passed"
else
    echo "   ‚ö†Ô∏è Hardware verification issues - check output above"
fi

echo
echo "3. üì± Testing USB scanner..."
echo "   Scanning test QR in 5 seconds..."
echo "   Scan any QR code when ready:"
echo -n "   "
read -t 10 test_scan
if [ -n "$test_scan" ]; then
    echo "   ‚úÖ Scanner working: '$test_scan'"
else
    echo "   ‚ùå Scanner timeout - check scanner setup"
fi

echo
echo "4. üìÅ Checking log directories..."
for dir in "batch_logs" "Batch_Setup_Logs"; do
    if [ -d "$dir" ]; then
        echo "   ‚úÖ $dir exists"
    else
        echo "   üìÅ Creating $dir..."
        mkdir -p "$dir"
        echo "   ‚úÖ $dir created"
    fi
done

echo
echo "5. ‚öôÔ∏è Checking configuration..."
if [ -f "settings.ini" ]; then
    echo "   ‚úÖ settings.ini found"
    
    # Check key settings
    if grep -q "controller = gpio" settings.ini; then
        echo "   ‚úÖ Hardware controller set to GPIO"
    else
        echo "   ‚ö†Ô∏è Hardware controller not set to GPIO"
        echo "      Edit settings.ini: [hardware] controller = gpio"
    fi
    
    if grep -q "enabled = false" settings.ini | head -1; then
        echo "   ‚úÖ Camera disabled (using USB scanner)"
    fi
else
    echo "   ‚ö†Ô∏è settings.ini not found - using defaults"
fi

echo
echo "6. üß™ Testing Python imports..."
python3 -c "
import main
import config
import hardware
import logic
print('   ‚úÖ All modules import successfully')
" 2>/dev/null || echo "   ‚ùå Module import errors - check Python dependencies"

echo
echo "======================="
echo "üìä SYSTEM STATUS:"
echo "======================="

# Determine system readiness
all_good=true

# Check critical components
if [ ${#missing_files[@]} -gt 0 ]; then
    echo "‚ùå Missing project files"
    all_good=false
fi

if ! python3 -c "import main" 2>/dev/null; then
    echo "‚ùå Python import issues"
    all_good=false
fi

if [ ! -d "batch_logs" ]; then
    echo "‚ùå Log directories missing"
    all_good=false
fi

if [ -z "$test_scan" ]; then
    echo "‚ùå Scanner not responding"
    all_good=false
fi

if [ "$all_good" = true ]; then
    echo "üéâ SYSTEM READY FOR PRODUCTION!"
    echo ""
    echo "üöÄ NEXT STEPS:"
    echo "   1. Connect jig hardware (PIC controller, sensors, actuators)"
    echo "   2. Program PIC with firmware: hardware_firmware/main.hex"
    echo "   3. Run application: python3 main.py"
    echo "   4. Follow batch setup wizard"
    echo "   5. Start scanning cartridges!"
    echo ""
    echo "üìñ OPERATION GUIDE:"
    echo "   ‚Ä¢ Fill batch info (number, line, moulds)"
    echo "   ‚Ä¢ Click 'Start Scanning'"
    echo "   ‚Ä¢ Load cartridges in jig stack"
    echo "   ‚Ä¢ Press START on physical jig"
    echo "   ‚Ä¢ Scan QR codes when prompted"
    echo "   ‚Ä¢ System automatically sorts cartridges"
else
    echo "üîß ISSUES FOUND - Fix the problems above"
    echo ""
    echo "üí° COMMON SOLUTIONS:"
    echo "   ‚Ä¢ Copy all files: scp -r project/ pi@pi-ip:/home/pi/"
    echo "   ‚Ä¢ Install dependencies: pip3 install pyserial"
    echo "   ‚Ä¢ Fix scanner: ./setup_scanner_pi.sh"
    echo "   ‚Ä¢ Check wiring: python3 verify_system.py"
fi

echo "======================="